package de.redsix.dmncheck.validators.core;

import org.camunda.bpm.model.dmn.DmnModelInstance;
import org.camunda.bpm.model.dmn.instance.ItemDefinition;
import org.checkerframework.checker.nullness.qual.NonNull;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * The validation context is used in validators with a local view of the DMN model instance to provide access to global
 * attributes of the DMN model instance.
 *
 * Note: Reading from the validation context is cached.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.formatter.FormatterChecker")
public class ValidationContext {

    private class Memoizer<T, U> {

        private final  Map<Class<T>, U> cache = new ConcurrentHashMap<>();

        private  Function<Class<T>, U> doMemoize( Memoizer<T, U> this, final  Function<Class<T>, U> function) {
            return input -> cache.computeIfAbsent(input, function);
        }
    }

    private final  Function<Class<ItemDefinition>, Collection<ItemDefinition>> itemDefinitions;

    public ValidationContext(final  DmnModelInstance dmnModelInstance) {
        this.itemDefinitions = new Memoizer<ItemDefinition, Collection<ItemDefinition>>().doMemoize(dmnModelInstance::getModelElementsByType);
    }

    /**
     * Provides access to the item definitions of a DMN model instance.
     *
     * @return A list of item definitions
     */
    public  Collection<ItemDefinition> getItemDefinitions() {
        return itemDefinitions.apply(ItemDefinition.class);
    }
}
