package de.redsix.dmncheck.plugin;

import de.redsix.dmncheck.result.Severity;
import de.redsix.dmncheck.result.ValidationResult;
import org.camunda.bpm.model.dmn.instance.InputEntry;
import org.camunda.bpm.model.dmn.instance.OutputEntry;
import org.camunda.bpm.model.dmn.instance.Rule;
import org.camunda.bpm.model.xml.instance.ModelElementInstance;
import java.io.File;
import java.util.Comparator;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class PrettyPrintValidationResults {

    @org.checkerframework.dataflow.qual.SideEffectFree
    private PrettyPrintValidationResults() {
    }

    public static class PluginLogger {

        protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Consumer<CharSequence> info;

        protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Consumer<CharSequence> warn;

        protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Consumer<CharSequence> error;

        public PluginLogger(final Consumer<CharSequence> info, final Consumer<CharSequence> warn, final Consumer<CharSequence> error) {
            this.info = info;
            this.warn = warn;
            this.error = error;
        }
    }

    public static void logPrettified(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull File file, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<ValidationResult> validationResults, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PluginLogger log) {
        log.info.accept("Validation results for file " + file.getAbsolutePath());
        validationResults.sort(Comparator.comparing(ValidationResult::getSeverity).reversed());
        for (ValidationResult validationResult : validationResults) {
            final String errorMessage = "Element '" + delegate(validationResult.getElement()) + "' of type '" + validationResult.getElement().getElementType().getTypeName() + "' has the following validation result: " + validationResult.getMessage();
            getLoggingMethod(validationResult.getSeverity(), log).accept(errorMessage);
        }
    }

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String delegate(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ModelElementInstance element) {
        if (element instanceof Rule) {
            return prettify((Rule) element);
        } else {
            return element.getRawTextContent().trim();
        }
    }

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String prettify(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Rule rule) {
        return Stream.concat(rule.getInputEntries().stream().map(InputEntry::getTextContent), rule.getOutputEntries().stream().map(OutputEntry::getTextContent)).collect(Collectors.joining(","));
    }

    @org.checkerframework.dataflow.qual.Pure
    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Consumer<CharSequence> getLoggingMethod(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Severity severity, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PluginLogger logger) {
        if (severity == Severity.WARNING) {
            return logger.warn;
        }
        return logger.error;
    }
}
