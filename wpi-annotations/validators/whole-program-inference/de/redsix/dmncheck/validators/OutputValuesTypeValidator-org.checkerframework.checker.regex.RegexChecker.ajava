package de.redsix.dmncheck.validators;

import de.redsix.dmncheck.feel.ExpressionTypeParser;
import de.redsix.dmncheck.result.ValidationResult;
import de.redsix.dmncheck.validators.core.ValidationContext;
import org.camunda.bpm.model.dmn.instance.Output;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.regex.RegexChecker")
public class OutputValuesTypeValidator extends TypeValidator<Output> {

    public   boolean isApplicable( OutputValuesTypeValidator this, final  Output output,  ValidationContext validationContext) {
        final String expressionType = output.getTypeRef();
        return output.getOutputValues() != null && ExpressionTypeParser.parse(expressionType, validationContext.getItemDefinitions()).match(parseError -> false, parseResult -> true);
    }

    public  List<ValidationResult> validate( OutputValuesTypeValidator this, final  Output output,  ValidationContext validationContext) {
        final String expressionType = output.getTypeRef();
        return ExpressionTypeParser.parse(expressionType, validationContext.getItemDefinitions()).match(validationResult -> Collections.singletonList(validationResult.element(output).build()), inputType -> typecheck(output, Stream.of(output.getOutputValues()).map(toplevelExpressionLanguage::toExpression), Stream.of(inputType)).collect(Collectors.toList()));
    }

    @org.checkerframework.dataflow.qual.Pure
    protected  Class<Output> getClassUnderValidation( OutputValuesTypeValidator this) {
        return Output.class;
    }

    @org.checkerframework.dataflow.qual.Pure
    @org.checkerframework.checker.regex.qual.Regex String errorMessage( OutputValuesTypeValidator this) {
        return "Type of predefined output values does not match type of output expression";
    }
}
