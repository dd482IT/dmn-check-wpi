package de.redsix.dmncheck.validators;

import de.redsix.dmncheck.feel.ExpressionType;
import de.redsix.dmncheck.feel.ExpressionTypeParser;
import de.redsix.dmncheck.result.ValidationResult;
import de.redsix.dmncheck.util.Either;
import de.redsix.dmncheck.validators.core.ValidationContext;
import org.camunda.bpm.model.dmn.instance.DecisionTable;
import org.camunda.bpm.model.dmn.instance.OutputClause;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.formatter.FormatterChecker")
public class OutputEntryTypeValidator extends TypeValidator<DecisionTable> {

    public   boolean isApplicable( OutputEntryTypeValidator this,  DecisionTable decisionTable,  ValidationContext validationContext) {
        return decisionTable.getOutputs().stream().allMatch(output -> {
            final String expressionType = output.getTypeRef();
            return ExpressionTypeParser.parse(expressionType, validationContext.getItemDefinitions()).match(parseError -> false, parseResult -> true);
        });
    }

    public List<ValidationResult> validate( OutputEntryTypeValidator this,  DecisionTable decisionTable,  ValidationContext validationContext) {
        final Either<ValidationResult.Builder.ElementStep, List<ExpressionType>> eitherOutputTypes = decisionTable.getOutputs().stream().map(OutputClause::getTypeRef).map(typeRef -> ExpressionTypeParser.parse(typeRef, validationContext.getItemDefinitions())).collect(Either.reduce());
        return decisionTable.getRules().stream().flatMap(rule -> eitherOutputTypes.match(validationResult -> Stream.of(validationResult.element(rule).build()), outputTypes -> typecheck(rule, rule.getOutputEntries().stream().map(toplevelExpressionLanguage::toExpression), outputTypes.stream()))).collect(Collectors.toList());
    }

    @org.checkerframework.dataflow.qual.Pure
    protected  Class<DecisionTable> getClassUnderValidation( OutputEntryTypeValidator this) {
        return DecisionTable.class;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.formatter.qual.Format({}) String errorMessage( OutputEntryTypeValidator this) {
        return "Type of output entry does not match type of output expression";
    }
}
