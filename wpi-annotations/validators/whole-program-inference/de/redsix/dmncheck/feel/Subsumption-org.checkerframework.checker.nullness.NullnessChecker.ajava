package de.redsix.dmncheck.feel;

import java.util.Optional;
import java.util.function.BiPredicate;
import java.util.function.Function;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
final class Subsumption {

    private interface Comparison<A extends Comparable> extends BiPredicate<A, A> {
    }

    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison<?> eq = (a, b) -> a.compareTo(b) == 0;

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison<?> nq = (a, b) -> a.compareTo(b) != 0;

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison<?> gt = (a, b) -> a.compareTo(b) > 0;

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison<?> lt = (a, b) -> a.compareTo(b) < 0;

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison<?> ge = (a, b) -> a.compareTo(b) == 0 || a.compareTo(b) > 0;

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison<?> le = (a, b) -> a.compareTo(b) == 0 || a.compareTo(b) < 0;

    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Optional<Boolean> subsumes(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression expression, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression otherExpression, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison comparison) {
        return FeelExpressions.caseOf(expression).Empty_(Optional.of(true)).Null_(FeelExpressions.caseOf(otherExpression).Null_(Optional.of(true)).otherwise_(Optional.of(false))).BooleanLiteral((aBool) -> compareLiterals(aBool, FeelExpressions::getABoolean, otherExpression, comparison)).DateLiteral((dateTime) -> compareLiterals(dateTime, FeelExpressions::getDateTime, otherExpression, comparison)).DoubleLiteral((aDouble) -> compareLiterals(aDouble, FeelExpressions::getADouble, otherExpression, comparison)).IntegerLiteral((integer) -> compareLiterals(integer, FeelExpressions::getAInteger, otherExpression, comparison)).StringLiteral((string) -> compareLiterals(string, FeelExpressions::getString, otherExpression, comparison)).VariableLiteral((name) -> subsumesVariableLiteral(name, otherExpression, comparison)).RangeExpression((leftInc, lowerBound, upperBound, rightInc) -> subsumesRangeExpression(leftInc, lowerBound, upperBound, rightInc, otherExpression)).UnaryExpression((operator, operand) -> subsumesUnaryExpression(operator, operand, otherExpression)).otherwise_(Optional.empty());
    }

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Optional<Boolean> subsumesVariableLiteral(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression otherExpression, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison comparison) {
        return FeelExpressions.caseOf(otherExpression).VariableLiteral(otherName -> Optional.of(comparison.test(name, otherName))).UnaryExpression(((operator, operand) -> Operator.NOT.equals(operator) ? subsumesVariableLiteral(name, operand, nq) : Optional.of(true))).otherwise_(Optional.of(true));
    }

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Optional<Boolean> subsumesUnaryExpression(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Operator operator, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression operand, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression otherExpression) {
        return FeelExpressions.caseOf(otherExpression).RangeExpression((leftInc, lowerBound, upperBound, rightInc) -> {
            switch(operator) {
                case LT:
                    return subsumes(upperBound, operand, rightInc ? lt : le);
                case GT:
                    return subsumes(operand, lowerBound, leftInc ? lt : le);
                case LE:
                    return subsumes(upperBound, operand, rightInc ? le : lt);
                case GE:
                    return subsumes(operand, lowerBound, leftInc ? le : lt);
                default:
                    return Optional.of(false);
            }
        }).UnaryExpression((otherOperator, otherOperand) -> {
            if (operator.equals(otherOperator) && operand.equals(otherOperand)) {
                return Optional.of(true);
            }
            if (operator.isGreaterThan() && otherOperator.isGreaterThan() || operator.isLessThan() && otherOperator.isLessThan()) {
                return subsumes(otherOperand, operand, fromOperator(operator));
            } else {
                return Optional.of(false);
            }
        }).otherwise(() -> {
            if (operator.equals(Operator.NOT) && otherExpression.isLiteral()) {
                return subsumes(operand, otherExpression, nq);
            } else {
                return Optional.of(false);
            }
        });
    }

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Optional<Boolean> subsumesRangeExpression( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean leftInc, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression lowerBound, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression upperBound,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean rightInc, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression otherExpression) {
        return FeelExpressions.caseOf(otherExpression).RangeExpression((otherLeftInc, otherLowerBound, otherUpperBound, otherRightInc) -> subsumes(lowerBound, otherLowerBound, leftInc ? le : lt).flatMap(subsumesLowerBound -> subsumes(otherUpperBound, upperBound, rightInc ? le : lt).flatMap(subsumesUpperBound -> Optional.of(subsumesLowerBound && subsumesUpperBound)))).otherwise(() -> {
            if (otherExpression.isLiteral()) {
                return subsumes(lowerBound, otherExpression, leftInc ? le : lt).flatMap(subsumedByLowerBound -> subsumes(upperBound, otherExpression, rightInc ? ge : gt).flatMap(subsumedByUpperBound -> Optional.of(subsumedByLowerBound && subsumedByUpperBound)));
            } else {
                return Optional.of(false);
            }
        });
    }

    private static <R extends Comparable> @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Optional<Boolean> compareLiterals(R value, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Function<FeelExpression, Optional<R>> extractOtherValue, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FeelExpression otherExpression, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison comparison) {
        return Optional.of(extractOtherValue.apply(otherExpression).map(otherValue -> comparison.test(value, otherValue)).orElse(false));
    }

    @org.checkerframework.dataflow.qual.Pure
    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Comparison fromOperator(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Operator operator) {
        switch(operator) {
            case LE:
                return le;
            case LT:
                return lt;
            case GT:
                return gt;
            case GE:
                return ge;
            default:
                return eq;
        }
    }
}
